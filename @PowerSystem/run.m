function run(ps, timeLimit)
% function run(ps,timeLimit)
%   This function runs the PowerSystem until timeLimit variable is reached. If timeLimit not specified it will run for 100ms.

  if nargin == 1
    timeLimit = 0.1;
  end

  if ps.timeVector(end) >= timeLimit
    error('PowerSystemPkg:PowerSystem.run','Power System has already run until this time limit');
  end
  ps.timeVector=0:ps.sysStep:timeLimit;
  first_idx = find(ps.timeVector == ps.currentTime) + 1;
  % Reserve memory:
  ps.sysInjectionMatrix = [ps.sysInjectionMatrix,...
    zeros(size(ps.sysYmodif,2),length(ps.timeVector)-(first_idx-1))];
  ps.sysVariablesMatrix = [ps.sysVariablesMatrix,...
    zeros(size(ps.sysYmodif,2),length(ps.timeVector)-(first_idx-1))];
  for time_idx=first_idx:length(ps.timeVector)
    ps.currentTime = ps.timeVector(time_idx);
    % Update Passive Elements Injection:
    for k=1:length(ps.sysPassiveElements)
      if ps.sysPassiveElements(k).busK % not connected to the ground?
        ps.sysPassiveElements(k).update_injection( ...
          ps.sysVariablesMatrix(...
            (ps.sysPassiveElements(k).busK-1)*ps.topology+1:(ps.sysPassiveElements(k).busK-1)*ps.topology+ps.topology,...
            time_idx-1 ...
          ), ...
          ps.sysVariablesMatrix(...
            (ps.sysPassiveElements(k).busM-1)*ps.topology+1:(ps.sysPassiveElements(k).busM-1)*ps.topology+ps.topology...
            ,time_idx-1 ...
          ) ...
        );
      else
        ps.sysPassiveElements(k).update_injection( ...
          zeros(ps.topology,1), ...
          ps.sysVariablesMatrix(...
            (ps.sysPassiveElements(k).busM-1)*ps.topology+1:(ps.sysPassiveElements(k).busM-1)*ps.topology+ps.topology...
            ,time_idx-1 ...
          ) ...
        );
      end
    end
    % Fill injection for the current time and update independent sources
    for k=1:length(ps.sysCurrentSources) % Current Sources
      ps.sysCurrentSources(k).update;
      ps.sysInjectionMatrix(...
        (ps.sysCurrentSources(k).busK-1)*ps.topology+1:(ps.sysCurrentSources(k).busK-1)*ps.topology+ps.topology...
        ,time_idx ...
      ) = ... 
      ps.sysInjectionMatrix(...
        (ps.sysCurrentSources(k).busK-1)*ps.topology+1:(ps.sysCurrentSources(k).busK-1)*ps.topology+ps.topology...
        ,time_idx ...
      ) + ps.sysCurrentSources(k).injection;
    end
    for k=1:length(ps.sysVoltageSources) % Voltage Sources
      ps.sysVoltageSources(k).update;
      ps.sysInjectionMatrix(...
        ps.topology*(ps.sysNumberOfBuses+(k-1))+1:ps.topology*(ps.sysNumberOfBuses+(k-1))+ps.topology...
        ,time_idx ...
      ) = ps.sysInjectionMatrix(...
        ps.topology*(ps.sysNumberOfBuses+(k-1))+1:ps.topology*(ps.sysNumberOfBuses+(k-1))+ps.topology...
        ,time_idx ...
      ) + ps.sysVoltageSources(k).injection;
    end
    % Add passive element current injections:
    for k=1:length(ps.sysPassiveElements) 
      if ps.sysPassiveElements(k).busK % not connected to the ground?
        ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busK-1)+1:ps.topology*(ps.sysPassiveElements(k).busK-1)+ps.topology...
          ,time_idx ...
        ) = ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busK-1)+1:ps.topology*(ps.sysPassiveElements(k).busK-1)+ps.topology...
          ,time_idx ...
        ) - ps.sysPassiveElements(k).injection; % flow from k to m
        ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology...
          ,time_idx ...
        ) = ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology...
          ,time_idx ...
        ) + ps.sysPassiveElements(k).injection; % flow from k to m
      else
        ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology...
          ,time_idx ...
        ) = ps.sysInjectionMatrix(...
          ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology...
          ,time_idx ...
        ) + ps.sysPassiveElements(k).injection; % flow from k to m
      end
    end
    % Determine variables:
    ps.sysVariablesMatrix(:,time_idx) = ps.sysInvYmodif * ps.sysInjectionMatrix(:,time_idx);
    % Update Passive Elements Ikm:
    for k=1:length(ps.sysPassiveElements)
      if ps.sysPassiveElements(k).busK % not connected to the ground?
        ps.sysPassiveElements(k).update_ikm( ...
          ps.sysVariablesMatrix(...
            ps.topology*(ps.sysPassiveElements(k).busK-1)+1:ps.topology*(ps.sysPassiveElements(k).busK-1)+ps.topology...
            ,time_idx ...
          ), ps.sysVariablesMatrix(...
            ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology...
            ,time_idx ...
          ) ...
        );
      else
        ps.sysPassiveElements(k).update_ikm(...
          zeros(ps.topology,1), ...
          ps.sysVariablesMatrix(...
            ps.topology*(ps.sysPassiveElements(k).busM-1)+1:ps.topology*(ps.sysPassiveElements(k).busM-1)+ps.topology,...
            time_idx ...
          )...
        );
      end
    end
  end
end % function run
